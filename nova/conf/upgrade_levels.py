from bees import profiler as p
from oslo_config import cfg
upgrade_group = cfg.OptGroup('upgrade_levels', title='Upgrade levels Options', help='\nupgrade_levels options are used to set version cap for RPC\nmessages sent between different nova services.\n\nBy default all services send messages using the latest version\nthey know about.\n\nThe compute upgrade level is an important part of rolling upgrades\nwhere old and new nova-compute services run side by side.\n\nThe other options can largely be ignored, and are only kept to\nhelp with a possible future backport issue.\n')
upgrade_levels_opts = [cfg.StrOpt('compute', help='\nCompute RPC API version cap.\n\nBy default, we always send messages using the most recent version\nthe client knows about.\n\nWhere you have old and new compute services running, you should set\nthis to the lowest deployed version. This is to guarantee that all\nservices never send messages that one of the compute nodes can\'t\nunderstand. Note that we only support upgrading from release N to\nrelease N+1.\n\nSet this option to "auto" if you want to let the compute RPC module\nautomatically determine what version to use based on the service\nversions in the deployment.\n\nPossible values:\n\n* By default send the latest version the client knows about\n* \'auto\': Automatically determines what version to use based on\n  the service versions in the deployment.\n* A string representing a version number in the format \'N.N\';\n  for example, possible values might be \'1.12\' or \'2.0\'.\n* An OpenStack release name, in lower case, such as \'mitaka\' or\n  \'liberty\'.\n'), cfg.StrOpt('cert', deprecated_for_removal=True, deprecated_since='18.0.0', deprecated_reason='\nThe nova-cert service was removed in 16.0.0 (Pike) so this option\nis no longer used.\n', help="\nCert RPC API version cap.\n\nPossible values:\n\n* By default send the latest version the client knows about\n* A string representing a version number in the format 'N.N';\n  for example, possible values might be '1.12' or '2.0'.\n* An OpenStack release name, in lower case, such as 'mitaka' or\n  'liberty'.\n"), cfg.StrOpt('scheduler', help="\nScheduler RPC API version cap.\n\nPossible values:\n\n* By default send the latest version the client knows about\n* A string representing a version number in the format 'N.N';\n  for example, possible values might be '1.12' or '2.0'.\n* An OpenStack release name, in lower case, such as 'mitaka' or\n  'liberty'.\n"), cfg.StrOpt('conductor', help="\nConductor RPC API version cap.\n\nPossible values:\n\n* By default send the latest version the client knows about\n* A string representing a version number in the format 'N.N';\n  for example, possible values might be '1.12' or '2.0'.\n* An OpenStack release name, in lower case, such as 'mitaka' or\n  'liberty'.\n"), cfg.StrOpt('baseapi', help="\nBase API RPC API version cap.\n\nPossible values:\n\n* By default send the latest version the client knows about\n* A string representing a version number in the format 'N.N';\n  for example, possible values might be '1.12' or '2.0'.\n* An OpenStack release name, in lower case, such as 'mitaka' or\n  'liberty'.\n")]

@p.trace('register_opts')
def register_opts(conf):
    conf.register_group(upgrade_group)
    conf.register_opts(upgrade_levels_opts, group=upgrade_group)

@p.trace('list_opts')
def list_opts():
    return {upgrade_group: upgrade_levels_opts}