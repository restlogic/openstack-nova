from bees import profiler as p
from oslo_config import cfg
from oslo_config import types
vnc_group = cfg.OptGroup('vnc', title='VNC options', help='\nVirtual Network Computer (VNC) can be used to provide remote desktop\nconsole access to instances for tenants and/or administrators.')
ALL_OPTS = [cfg.BoolOpt('enabled', default=True, deprecated_group='DEFAULT', deprecated_name='vnc_enabled', help='\nEnable VNC related features.\n\nGuests will get created with graphical devices to support this. Clients\n(for example Horizon) can then establish a VNC connection to the guest.\n'), cfg.HostAddressOpt('server_listen', default='127.0.0.1', deprecated_opts=[cfg.DeprecatedOpt('vncserver_listen', group='DEFAULT'), cfg.DeprecatedOpt('vncserver_listen', group='vnc')], help='\nThe IP address or hostname on which an instance should listen to for\nincoming VNC connection requests on this node.\n'), cfg.HostAddressOpt('server_proxyclient_address', default='127.0.0.1', deprecated_opts=[cfg.DeprecatedOpt('vncserver_proxyclient_address', group='DEFAULT'), cfg.DeprecatedOpt('vncserver_proxyclient_address', group='vnc')], help='\nPrivate, internal IP address or hostname of VNC console proxy.\n\nThe VNC proxy is an OpenStack component that enables compute service\nusers to access their instances through VNC clients.\n\nThis option sets the private address to which proxy clients, such as\n``nova-novncproxy``, should connect to.\n'), cfg.URIOpt('novncproxy_base_url', default='http://127.0.0.1:6080/vnc_auto.html', deprecated_group='DEFAULT', help='\nPublic address of noVNC VNC console proxy.\n\nThe VNC proxy is an OpenStack component that enables compute service\nusers to access their instances through VNC clients. noVNC provides\nVNC support through a websocket-based client.\n\nThis option sets the public base URL to which client systems will\nconnect. noVNC clients can use this address to connect to the noVNC\ninstance and, by extension, the VNC sessions.\n\nIf using noVNC >= 1.0.0, you should use ``vnc_lite.html`` instead of\n``vnc_auto.html``.\n\nRelated options:\n\n* novncproxy_host\n* novncproxy_port\n')]
CLI_OPTS = [cfg.StrOpt('novncproxy_host', default='0.0.0.0', deprecated_group='DEFAULT', help='\nIP address that the noVNC console proxy should bind to.\n\nThe VNC proxy is an OpenStack component that enables compute service\nusers to access their instances through VNC clients. noVNC provides\nVNC support through a websocket-based client.\n\nThis option sets the private address to which the noVNC console proxy\nservice should bind to.\n\nRelated options:\n\n* novncproxy_port\n* novncproxy_base_url\n'), cfg.PortOpt('novncproxy_port', default=6080, deprecated_group='DEFAULT', help='\nPort that the noVNC console proxy should bind to.\n\nThe VNC proxy is an OpenStack component that enables compute service\nusers to access their instances through VNC clients. noVNC provides\nVNC support through a websocket-based client.\n\nThis option sets the private port to which the noVNC console proxy\nservice should bind to.\n\nRelated options:\n\n* novncproxy_host\n* novncproxy_base_url\n'), cfg.ListOpt('auth_schemes', item_type=types.String(choices=(('none', 'Allow connection without authentication'), ('vencrypt', 'Use VeNCrypt authentication scheme'))), default=['none'], help='\nThe authentication schemes to use with the compute node.\n\nControl what RFB authentication schemes are permitted for connections between\nthe proxy and the compute host. If multiple schemes are enabled, the first\nmatching scheme will be used, thus the strongest schemes should be listed\nfirst.\n\nRelated options:\n\n* ``[vnc]vencrypt_client_key``, ``[vnc]vencrypt_client_cert``: must also be set\n'), cfg.StrOpt('vencrypt_client_key', help='The path to the client certificate PEM file (for x509)\n\nThe fully qualified path to a PEM file containing the private key which the VNC\nproxy server presents to the compute node during VNC authentication.\n\nRelated options:\n\n* ``vnc.auth_schemes``: must include ``vencrypt``\n* ``vnc.vencrypt_client_cert``: must also be set\n'), cfg.StrOpt('vencrypt_client_cert', help='The path to the client key file (for x509)\n\nThe fully qualified path to a PEM file containing the x509 certificate which\nthe VNC proxy server presents to the compute node during VNC authentication.\n\nRealted options:\n\n* ``vnc.auth_schemes``: must include ``vencrypt``\n* ``vnc.vencrypt_client_key``: must also be set\n'), cfg.StrOpt('vencrypt_ca_certs', help='The path to the CA certificate PEM file\n\nThe fully qualified path to a PEM file containing one or more x509 certificates\nfor the certificate authorities used by the compute node VNC server.\n\nRelated options:\n\n* ``vnc.auth_schemes``: must include ``vencrypt``\n')]
ALL_OPTS.extend(CLI_OPTS)

@p.trace('register_opts')
def register_opts(conf):
    conf.register_group(vnc_group)
    conf.register_opts(ALL_OPTS, group=vnc_group)

@p.trace('register_cli_opts')
def register_cli_opts(conf):
    conf.register_cli_opts(CLI_OPTS, group=vnc_group)

@p.trace('list_opts')
def list_opts():
    return {vnc_group: ALL_OPTS}