from bees import profiler as p
from oslo_config import cfg
spice_opt_group = cfg.OptGroup('spice', title='SPICE console features', help='\nSPICE console feature allows you to connect to a guest virtual machine.\nSPICE is a replacement for fairly limited VNC protocol.\n\nFollowing requirements must be met in order to use SPICE:\n\n* Virtualization driver must be libvirt\n* spice.enabled set to True\n* vnc.enabled set to False\n* update html5proxy_base_url\n* update server_proxyclient_address\n')
CLI_OPTS = [cfg.HostAddressOpt('html5proxy_host', default='0.0.0.0', help='\nIP address or a hostname on which the ``nova-spicehtml5proxy`` service\nlistens for incoming requests.\n\nRelated options:\n\n* This option depends on the ``html5proxy_base_url`` option.\n  The ``nova-spicehtml5proxy`` service must be listening on a host that is\n  accessible from the HTML5 client.\n'), cfg.PortOpt('html5proxy_port', default=6082, help='\nPort on which the ``nova-spicehtml5proxy`` service listens for incoming\nrequests.\n\nRelated options:\n\n* This option depends on the ``html5proxy_base_url`` option.\n  The ``nova-spicehtml5proxy`` service must be listening on a port that is\n  accessible from the HTML5 client.\n')]
ALL_OPTS = [cfg.BoolOpt('enabled', default=False, help='\nEnable SPICE related features.\n\nRelated options:\n\n* VNC must be explicitly disabled to get access to the SPICE console. Set the\n  enabled option to False in the [vnc] section to disable the VNC console.\n'), cfg.BoolOpt('agent_enabled', default=True, help='\nEnable the SPICE guest agent support on the instances.\n\nThe Spice agent works with the Spice protocol to offer a better guest console\nexperience. However, the Spice console can still be used without the Spice\nAgent. With the Spice agent installed the following features are enabled:\n\n* Copy & Paste of text and images between the guest and client machine\n* Automatic adjustment of resolution when the client screen changes - e.g.\n  if you make the Spice console full screen the guest resolution will adjust to\n  match it rather than letterboxing.\n* Better mouse integration - The mouse can be captured and released without\n  needing to click inside the console or press keys to release it. The\n  performance of mouse movement is also improved.\n'), cfg.URIOpt('html5proxy_base_url', default='http://127.0.0.1:6082/spice_auto.html', help='\nLocation of the SPICE HTML5 console proxy.\n\nEnd user would use this URL to connect to the `nova-spicehtml5proxy``\nservice. This service will forward request to the console of an instance.\n\nIn order to use SPICE console, the service ``nova-spicehtml5proxy`` should be\nrunning. This service is typically launched on the controller node.\n\nPossible values:\n\n* Must be a valid URL of the form:  ``http://host:port/spice_auto.html``\n  where host is the node running ``nova-spicehtml5proxy`` and the port is\n  typically 6082. Consider not using default value as it is not well defined\n  for any real deployment.\n\nRelated options:\n\n* This option depends on ``html5proxy_host`` and ``html5proxy_port`` options.\n  The access URL returned by the compute node must have the host\n  and port where the ``nova-spicehtml5proxy`` service is listening.\n'), cfg.StrOpt('server_listen', default='127.0.0.1', help='\nThe  address where the SPICE server running on the instances should listen.\n\nTypically, the ``nova-spicehtml5proxy`` proxy client runs on the controller\nnode and connects over the private network to this address on the compute\nnode(s).\n\nPossible values:\n\n* IP address to listen on.\n'), cfg.StrOpt('server_proxyclient_address', default='127.0.0.1', help='\nThe address used by ``nova-spicehtml5proxy`` client to connect to instance\nconsole.\n\nTypically, the ``nova-spicehtml5proxy`` proxy client runs on the\ncontroller node and connects over the private network to this address on the\ncompute node(s).\n\nPossible values:\n\n* Any valid IP address on the compute node.\n\nRelated options:\n\n* This option depends on the ``server_listen`` option.\n  The proxy client must be able to access the address specified in\n  ``server_listen`` using the value of this option.\n')]
ALL_OPTS.extend(CLI_OPTS)

@p.trace('register_opts')
def register_opts(conf):
    conf.register_opts(ALL_OPTS, group=spice_opt_group)

@p.trace('register_cli_opts')
def register_cli_opts(conf):
    conf.register_cli_opts(CLI_OPTS, group=spice_opt_group)

@p.trace('list_opts')
def list_opts():
    return {spice_opt_group: ALL_OPTS}