from bees import profiler as p
from oslo_config import cfg
api_group = cfg.OptGroup('api', title='API options', help='\nOptions under this group are used to define Nova API.\n')
auth_opts = [cfg.StrOpt('auth_strategy', default='keystone', choices=[('keystone', 'Use keystone for authentication.'), ('noauth2', "Designed for testing only, as it does no actual credential checking. 'noauth2' provides administrative credentials only if 'admin' is specified as the username.")], deprecated_for_removal=True, deprecated_since='21.0.0', deprecated_reason='\nThe only non-default choice, ``noauth2``, is for internal development and\ntesting purposes only and should not be used in deployments. This option and\nits middleware, NoAuthMiddleware[V2_18], will be removed in a future release.\n', help='\nDetermine the strategy to use for authentication.\n'), cfg.BoolOpt('use_forwarded_for', default=False, deprecated_group='DEFAULT', help="\nWhen True, the 'X-Forwarded-For' header is treated as the canonical remote\naddress. When False (the default), the 'remote_address' header is used.\n\nYou should only enable this if you have an HTML sanitizing proxy.\n")]
metadata_opts = [cfg.StrOpt('config_drive_skip_versions', default='1.0 2007-01-19 2007-03-01 2007-08-29 2007-10-10 2007-12-15 2008-02-01 2008-09-01', deprecated_group='DEFAULT', help="\nWhen gathering the existing metadata for a config drive, the EC2-style\nmetadata is returned for all versions that don't appear in this option.\nAs of the Liberty release, the available versions are:\n\n* 1.0\n* 2007-01-19\n* 2007-03-01\n* 2007-08-29\n* 2007-10-10\n* 2007-12-15\n* 2008-02-01\n* 2008-09-01\n* 2009-04-04\n\nThe option is in the format of a single string, with each version separated\nby a space.\n\nPossible values:\n\n* Any string that represents zero or more versions, separated by spaces.\n"), cfg.ListOpt('vendordata_providers', item_type=cfg.types.String(choices=[('StaticJSON', 'Load a JSON file from the path configured by ``vendordata_jsonfile_path`` and use this as the source for ``vendor_data.json`` and ``vendor_data2.json``.'), ('DynamicJSON', 'Build a JSON file using values defined in ``vendordata_dynamic_targets`` and use this as the source for ``vendor_data2.json``.')]), default=['StaticJSON'], deprecated_group='DEFAULT', help='\nA list of vendordata providers.\n\nvendordata providers are how deployers can provide metadata via configdrive\nand metadata that is specific to their deployment.\n\nFor more information on the requirements for implementing a vendordata\ndynamic endpoint, please see the vendordata.rst file in the nova developer\nreference.\n\nRelated options:\n\n* ``vendordata_dynamic_targets``\n* ``vendordata_dynamic_ssl_certfile``\n* ``vendordata_dynamic_connect_timeout``\n* ``vendordata_dynamic_read_timeout``\n* ``vendordata_dynamic_failure_fatal``\n'), cfg.ListOpt('vendordata_dynamic_targets', default=[], deprecated_group='DEFAULT', help='\nA list of targets for the dynamic vendordata provider. These targets are of\nthe form ``<name>@<url>``.\n\nThe dynamic vendordata provider collects metadata by contacting external REST\nservices and querying them for information about the instance. This behaviour\nis documented in the vendordata.rst file in the nova developer reference.\n'), cfg.StrOpt('vendordata_dynamic_ssl_certfile', default='', deprecated_group='DEFAULT', help='\nPath to an optional certificate file or CA bundle to verify dynamic\nvendordata REST services ssl certificates against.\n\nPossible values:\n\n* An empty string, or a path to a valid certificate file\n\nRelated options:\n\n* vendordata_providers\n* vendordata_dynamic_targets\n* vendordata_dynamic_connect_timeout\n* vendordata_dynamic_read_timeout\n* vendordata_dynamic_failure_fatal\n'), cfg.IntOpt('vendordata_dynamic_connect_timeout', default=5, min=3, deprecated_group='DEFAULT', help='\nMaximum wait time for an external REST service to connect.\n\nPossible values:\n\n* Any integer with a value greater than three (the TCP packet retransmission\n  timeout). Note that instance start may be blocked during this wait time,\n  so this value should be kept small.\n\nRelated options:\n\n* vendordata_providers\n* vendordata_dynamic_targets\n* vendordata_dynamic_ssl_certfile\n* vendordata_dynamic_read_timeout\n* vendordata_dynamic_failure_fatal\n'), cfg.IntOpt('vendordata_dynamic_read_timeout', default=5, min=0, deprecated_group='DEFAULT', help='\nMaximum wait time for an external REST service to return data once connected.\n\nPossible values:\n\n* Any integer. Note that instance start is blocked during this wait time,\n  so this value should be kept small.\n\nRelated options:\n\n* vendordata_providers\n* vendordata_dynamic_targets\n* vendordata_dynamic_ssl_certfile\n* vendordata_dynamic_connect_timeout\n* vendordata_dynamic_failure_fatal\n'), cfg.BoolOpt('vendordata_dynamic_failure_fatal', default=False, help='\nShould failures to fetch dynamic vendordata be fatal to instance boot?\n\nRelated options:\n\n* vendordata_providers\n* vendordata_dynamic_targets\n* vendordata_dynamic_ssl_certfile\n* vendordata_dynamic_connect_timeout\n* vendordata_dynamic_read_timeout\n'), cfg.IntOpt('metadata_cache_expiration', default=15, min=0, deprecated_group='DEFAULT', help='\nThis option is the time (in seconds) to cache metadata. When set to 0,\nmetadata caching is disabled entirely; this is generally not recommended for\nperformance reasons. Increasing this setting should improve response times\nof the metadata API when under heavy load. Higher values may increase memory\nusage, and result in longer times for host metadata changes to take effect.\n'), cfg.BoolOpt('local_metadata_per_cell', default=False, help='\nIndicates that the nova-metadata API service has been deployed per-cell, so\nthat we can have better performance and data isolation in a multi-cell\ndeployment. Users should consider the use of this configuration depending on\nhow neutron is setup. If you have networks that span cells, you might need to\nrun nova-metadata API service globally. If your networks are segmented along\ncell boundaries, then you can run nova-metadata API service per cell. When\nrunning nova-metadata API service per cell, you should also configure each\nNeutron metadata-agent to point to the corresponding nova-metadata API\nservice.\n'), cfg.StrOpt('dhcp_domain', deprecated_group='DEFAULT', default='novalocal', help='\nDomain name used to configure FQDN for instances.\n\nConfigure a fully-qualified domain name for instance hostnames. If unset, only\nthe hostname without a domain will be configured.\n\nPossible values:\n\n* Any string that is a valid domain name.\n')]
file_opts = [cfg.StrOpt('vendordata_jsonfile_path', deprecated_group='DEFAULT', help='\nCloud providers may store custom data in vendor data file that will then be\navailable to the instances via the metadata service, and to the rendering of\nconfig-drive. The default class for this, JsonFileVendorData, loads this\ninformation from a JSON file, whose path is configured by this option. If\nthere is no path set by this option, the class returns an empty dictionary.\n\nNote that when using this to provide static vendor data to a configuration\ndrive, the nova-compute service must be configured with this option and the\nfile must be accessible from the nova-compute host.\n\nPossible values:\n\n* Any string representing the path to the data file, or an empty string\n  (default).\n')]
osapi_opts = [cfg.IntOpt('max_limit', default=1000, min=0, deprecated_group='DEFAULT', deprecated_name='osapi_max_limit', help='\nAs a query can potentially return many thousands of items, you can limit the\nmaximum number of items in a single response by setting this option.\n'), cfg.StrOpt('compute_link_prefix', deprecated_group='DEFAULT', deprecated_name='osapi_compute_link_prefix', help='\nThis string is prepended to the normal URL that is returned in links to the\nOpenStack Compute API. If it is empty (the default), the URLs are returned\nunchanged.\n\nPossible values:\n\n* Any string, including an empty string (the default).\n'), cfg.StrOpt('glance_link_prefix', deprecated_group='DEFAULT', deprecated_name='osapi_glance_link_prefix', help='\nThis string is prepended to the normal URL that is returned in links to\nGlance resources. If it is empty (the default), the URLs are returned\nunchanged.\n\nPossible values:\n\n* Any string, including an empty string (the default).\n'), cfg.BoolOpt('instance_list_per_project_cells', default=False, help='\nWhen enabled, this will cause the API to only query cell databases\nin which the tenant has mapped instances. This requires an additional\n(fast) query in the API database before each list, but also\n(potentially) limits the number of cell databases that must be queried\nto provide the result. If you have a small number of cells, or tenants\nare likely to have instances in all cells, then this should be\nFalse. If you have many cells, especially if you confine tenants to a\nsmall subset of those cells, this should be True.\n'), cfg.StrOpt('instance_list_cells_batch_strategy', default='distributed', choices=[('distributed', 'Divide the limit requested by the user by the number of cells in the system. This requires counting the cells in the system initially, which will not be refreshed until service restart or SIGHUP. The actual batch size will be increased by 10% over the result of ($limit / $num_cells).'), ('fixed', 'Request fixed-size batches from each cell, as defined by ``instance_list_cells_batch_fixed_size``. If the limit is smaller than the batch size, the limit will be used instead. If you do not wish batching to be used at all, setting the fixed size equal to the ``max_limit`` value will cause only one request per cell database to be issued.')], help='\nThis controls the method by which the API queries cell databases in\nsmaller batches during large instance list operations. If batching is\nperformed, a large instance list operation will request some fraction\nof the overall API limit from each cell database initially, and will\nre-request that same batch size as records are consumed (returned)\nfrom each cell as necessary. Larger batches mean less chattiness\nbetween the API and the database, but potentially more wasted effort\nprocessing the results from the database which will not be returned to\nthe user. Any strategy will yield a batch size of at least 100 records,\nto avoid a user causing many tiny database queries in their request.\n\nRelated options:\n\n* instance_list_cells_batch_fixed_size\n* max_limit\n'), cfg.IntOpt('instance_list_cells_batch_fixed_size', min=100, default=100, help='\nThis controls the batch size of instances requested from each cell\ndatabase if ``instance_list_cells_batch_strategy``` is set to ``fixed``.\nThis integral value will define the limit issued to each cell every time\na batch of instances is requested, regardless of the number of cells in\nthe system or any other factors. Per the general logic called out in\nthe documentation for ``instance_list_cells_batch_strategy``, the\nminimum value for this is 100 records per batch.\n\nRelated options:\n\n* instance_list_cells_batch_strategy\n* max_limit\n'), cfg.BoolOpt('list_records_by_skipping_down_cells', default=True, help='\nWhen set to False, this will cause the API to return a 500 error if there is an\ninfrastructure failure like non-responsive cells. If you want the API to skip\nthe down cells and return the results from the up cells set this option to\nTrue.\n\nNote that from API microversion 2.69 there could be transient conditions in the\ndeployment where certain records are not available and the results could be\npartial for certain requests containing those records. In those cases this\noption will be ignored. See "Handling Down Cells" section of the Compute API\nguide (https://docs.openstack.org/api-guide/compute/down_cells.html) for\nmore information.\n')]
os_network_opts = [cfg.BoolOpt('use_neutron_default_nets', default=False, deprecated_group='DEFAULT', help='\nWhen True, the TenantNetworkController will query the Neutron API to get the\ndefault networks to use.\n\nRelated options:\n\n* neutron_default_tenant_id\n'), cfg.StrOpt('neutron_default_tenant_id', default='default', deprecated_group='DEFAULT', help="\nTenant ID for getting the default network from Neutron API (also referred in\nsome places as the 'project ID') to use.\n\nRelated options:\n\n* use_neutron_default_nets\n")]
enable_inst_pw_opts = [cfg.BoolOpt('enable_instance_password', default=True, deprecated_group='DEFAULT', help='\nEnables returning of the instance password by the relevant server API calls\nsuch as create, rebuild, evacuate, or rescue. If the hypervisor does not\nsupport password injection, then the password returned will not be correct,\nso if your hypervisor does not support password injection, set this to False.\n')]
API_OPTS = auth_opts + metadata_opts + file_opts + osapi_opts + os_network_opts + enable_inst_pw_opts

@p.trace('register_opts')
def register_opts(conf):
    conf.register_group(api_group)
    conf.register_opts(API_OPTS, group=api_group)

@p.trace('list_opts')
def list_opts():
    return {api_group: API_OPTS}