from bees import profiler as p
from oslo_config import cfg
imagecache_group = cfg.OptGroup('image_cache', title='Image Cache Options', help='\nA collection of options specific to image caching.\n')
imagecache_opts = [cfg.IntOpt('manager_interval', default=2400, min=-1, deprecated_name='image_cache_manager_interval', deprecated_group='DEFAULT', help='\nNumber of seconds to wait between runs of the image cache manager.\n\nNote that when using shared storage for the ``[DEFAULT]/instances_path``\nconfiguration option across multiple nova-compute services, this periodic\ncould process a large number of instances. Similarly, using a compute driver\nthat manages a cluster (like vmwareapi.VMwareVCDriver) could result in\nprocessing a large number of instances. Therefore you may need to adjust the\ntime interval for the anticipated load, or only run on one nova-compute\nservice within a shared storage aggregate.\n\nPossible values:\n\n* 0: run at the default interval of 60 seconds (not recommended)\n* -1: disable\n* Any other value\n\nRelated options:\n\n* ``[DEFAULT]/compute_driver``\n* ``[DEFAULT]/instances_path``\n'), cfg.StrOpt('subdirectory_name', default='_base', deprecated_name='image_cache_subdirectory_name', deprecated_group='DEFAULT', help="\nLocation of cached images.\n\nThis is NOT the full path - just a folder name relative to '$instances_path'.\nFor per-compute-host cached images, set to '_base_$my_ip'\n"), cfg.BoolOpt('remove_unused_base_images', default=True, deprecated_group='DEFAULT', help='Should unused base images be removed?'), cfg.IntOpt('remove_unused_original_minimum_age_seconds', default=24 * 3600, deprecated_group='DEFAULT', help='\nUnused unresized base images younger than this will not be removed.\n'), cfg.IntOpt('remove_unused_resized_minimum_age_seconds', default=3600, deprecated_group='libvirt', help='\nUnused resized base images younger than this will not be removed.\n'), cfg.IntOpt('precache_concurrency', default=1, min=1, help='\nMaximum number of compute hosts to trigger image precaching in parallel.\n\nWhen an image precache request is made, compute nodes will be contacted\nto initiate the download. This number constrains the number of those that\nwill happen in parallel. Higher numbers will cause more computes to work\nin parallel and may result in reduced time to complete the operation, but\nmay also DDoS the image service. Lower numbers will result in more sequential\noperation, lower image service load, but likely longer runtime to completion.\n')]
ALL_OPTS = (imagecache_opts,)

@p.trace('register_opts')
def register_opts(conf):
    conf.register_group(imagecache_group)
    conf.register_opts(imagecache_opts, group=imagecache_group)

@p.trace('list_opts')
def list_opts():
    return {imagecache_group: imagecache_opts}