from bees import profiler as p
from oslo_config import cfg
pci_group = cfg.OptGroup(name='pci', title='PCI passthrough options')
pci_opts = [cfg.MultiStrOpt('alias', default=[], deprecated_name='pci_alias', deprecated_group='DEFAULT', help='\nAn alias for a PCI passthrough device requirement.\n\nThis allows users to specify the alias in the extra specs for a flavor, without\nneeding to repeat all the PCI property requirements.\n\nThis should be configured for the ``nova-api`` service and, assuming you wish\nto use move operations, for each ``nova-compute`` service.\n\nPossible Values:\n\n* A dictionary of JSON values which describe the aliases. For example::\n\n    alias = {\n      "name": "QuickAssist",\n      "product_id": "0443",\n      "vendor_id": "8086",\n      "device_type": "type-PCI",\n      "numa_policy": "required"\n    }\n\n  This defines an alias for the Intel QuickAssist card. (multi valued). Valid\n  key values are :\n\n  ``name``\n    Name of the PCI alias.\n\n  ``product_id``\n    Product ID of the device in hexadecimal.\n\n  ``vendor_id``\n    Vendor ID of the device in hexadecimal.\n\n  ``device_type``\n    Type of PCI device. Valid values are: ``type-PCI``, ``type-PF`` and\n    ``type-VF``. Note that ``"device_type": "type-PF"`` **must** be specified\n    if you wish to passthrough a device that supports SR-IOV in its entirety.\n\n  ``numa_policy``\n    Required NUMA affinity of device. Valid values are: ``legacy``,\n    ``preferred`` and ``required``.\n\n* Supports multiple aliases by repeating the option (not by specifying\n  a list value)::\n\n    alias = {\n      "name": "QuickAssist-1",\n      "product_id": "0443",\n      "vendor_id": "8086",\n      "device_type": "type-PCI",\n      "numa_policy": "required"\n    }\n    alias = {\n      "name": "QuickAssist-2",\n      "product_id": "0444",\n      "vendor_id": "8086",\n      "device_type": "type-PCI",\n      "numa_policy": "required"\n    }\n'), cfg.MultiStrOpt('passthrough_whitelist', default=[], deprecated_name='pci_passthrough_whitelist', deprecated_group='DEFAULT', help='\nWhite list of PCI devices available to VMs.\n\nPossible values:\n\n* A JSON dictionary which describe a whitelisted PCI device. It should take\n  the following format::\n\n    ["vendor_id": "<id>",] ["product_id": "<id>",]\n    ["address": "[[[[<domain>]:]<bus>]:][<slot>][.[<function>]]" |\n     "devname": "<name>",]\n    {"<tag>": "<tag_value>",}\n\n  Where ``[`` indicates zero or one occurrences, ``{`` indicates zero or\n  multiple occurrences, and ``|`` mutually exclusive options. Note that any\n  missing fields are automatically wildcarded.\n\n  Valid key values are :\n\n  ``vendor_id``\n    Vendor ID of the device in hexadecimal.\n\n  ``product_id``\n    Product ID of the device in hexadecimal.\n\n  ``address``\n    PCI address of the device. Both traditional glob style and regular\n    expression syntax is supported. Please note that the address fields are\n    restricted to the following maximum values:\n\n    * domain - 0xFFFF\n    * bus - 0xFF\n    * slot - 0x1F\n    * function - 0x7\n\n  ``devname``\n    Device name of the device (for e.g. interface name). Not all PCI devices\n    have a name.\n\n  ``<tag>``\n    Additional ``<tag>`` and ``<tag_value>`` used for matching PCI devices.\n    Supported ``<tag>`` values are :\n\n    - ``physical_network``\n    - ``trusted``\n\n  Valid examples are::\n\n    passthrough_whitelist = {"devname":"eth0",\n                             "physical_network":"physnet"}\n    passthrough_whitelist = {"address":"*:0a:00.*"}\n    passthrough_whitelist = {"address":":0a:00.",\n                             "physical_network":"physnet1"}\n    passthrough_whitelist = {"vendor_id":"1137",\n                             "product_id":"0071"}\n    passthrough_whitelist = {"vendor_id":"1137",\n                             "product_id":"0071",\n                             "address": "0000:0a:00.1",\n                             "physical_network":"physnet1"}\n    passthrough_whitelist = {"address":{"domain": ".*",\n                                        "bus": "02", "slot": "01",\n                                        "function": "[2-7]"},\n                             "physical_network":"physnet1"}\n    passthrough_whitelist = {"address":{"domain": ".*",\n                                        "bus": "02", "slot": "0[1-2]",\n                                        "function": ".*"},\n                             "physical_network":"physnet1"}\n    passthrough_whitelist = {"devname": "eth0", "physical_network":"physnet1",\n                             "trusted": "true"}\n\n  The following are invalid, as they specify mutually exclusive options::\n\n    passthrough_whitelist = {"devname":"eth0",\n                             "physical_network":"physnet",\n                             "address":"*:0a:00.*"}\n\n* A JSON list of JSON dictionaries corresponding to the above format. For\n  example::\n\n    passthrough_whitelist = [{"product_id":"0001", "vendor_id":"8086"},\n                             {"product_id":"0002", "vendor_id":"8086"}]\n')]

@p.trace('register_opts')
def register_opts(conf):
    conf.register_group(pci_group)
    conf.register_opts(pci_opts, group=pci_group)

@p.trace('list_opts')
def list_opts():
    return {pci_group: pci_opts}