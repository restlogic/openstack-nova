from bees import profiler as p
from keystoneauth1 import loading as ks_loading
from oslo_config import cfg
from nova.conf import utils as confutils
DEFAULT_SERVICE_TYPE = 'image'
glance_group = cfg.OptGroup('glance', title='Glance Options', help='Configuration options for the Image service')
glance_opts = [cfg.ListOpt('api_servers', deprecated_for_removal=True, deprecated_since='21.0.0', deprecated_reason='\nSupport for image service configuration via standard keystoneauth1 Adapter\noptions was added in the 17.0.0 Queens release. The api_servers option was\nretained temporarily to allow consumers time to cut over to a real load\nbalancing solution.\n', help='\nList of glance api servers endpoints available to nova.\n\nhttps is used for ssl-based glance api servers.\n\nNOTE: The preferred mechanism for endpoint discovery is via keystoneauth1\nloading options. Only use api_servers if you need multiple endpoints and are\nunable to use a load balancer for some reason.\n\nPossible values:\n\n* A list of any fully qualified url of the form "scheme://hostname:port[/path]"\n  (i.e. "http://10.0.1.0:9292" or "https://my.glance.server/image").\n'), cfg.IntOpt('num_retries', default=3, min=0, help='\nEnable glance operation retries.\n\nSpecifies the number of retries when uploading / downloading\nan image to / from glance. 0 means no retries.\n'), cfg.BoolOpt('verify_glance_signatures', default=False, help='\nEnable image signature verification.\n\nnova uses the image signature metadata from glance and verifies the signature\nof a signed image while downloading that image. If the image signature cannot\nbe verified or if the image signature metadata is either incomplete or\nunavailable, then nova will not boot the image and instead will place the\ninstance into an error state. This provides end users with stronger assurances\nof the integrity of the image data they are using to create servers.\n\nRelated options:\n\n* The options in the `key_manager` group, as the key_manager is used\n  for the signature validation.\n* Both enable_certificate_validation and default_trusted_certificate_ids\n  below depend on this option being enabled.\n'), cfg.BoolOpt('enable_certificate_validation', default=False, deprecated_for_removal=True, deprecated_since='16.0.0', deprecated_reason='\nThis option is intended to ease the transition for deployments leveraging\nimage signature verification. The intended state long-term is for signature\nverification and certificate validation to always happen together.\n', help="\nEnable certificate validation for image signature verification.\n\nDuring image signature verification nova will first verify the validity of the\nimage's signing certificate using the set of trusted certificates associated\nwith the instance. If certificate validation fails, signature verification\nwill not be performed and the instance will be placed into an error state. This\nprovides end users with stronger assurances that the image data is unmodified\nand trustworthy. If left disabled, image signature verification can still\noccur but the end user will not have any assurance that the signing\ncertificate used to generate the image signature is still trustworthy.\n\nRelated options:\n\n* This option only takes effect if verify_glance_signatures is enabled.\n* The value of default_trusted_certificate_ids may be used when this option\n  is enabled.\n"), cfg.ListOpt('default_trusted_certificate_ids', default=[], help='\nList of certificate IDs for certificates that should be trusted.\n\nMay be used as a default list of trusted certificate IDs for certificate\nvalidation. The value of this option will be ignored if the user provides a\nlist of trusted certificate IDs with an instance API request. The value of\nthis option will be persisted with the instance data if signature verification\nand certificate validation are enabled and if the user did not provide an\nalternative list. If left empty when certificate validation is enabled the\nuser must provide a list of trusted certificate IDs otherwise certificate\nvalidation will fail.\n\nRelated options:\n\n* The value of this option may be used if both verify_glance_signatures and\n  enable_certificate_validation are enabled.\n'), cfg.BoolOpt('enable_rbd_download', default=False, help='\nEnable download of Glance images directly via RBD.\n\nAllow compute hosts to quickly download and cache images localy directly\nfrom Ceph rather than slow dowloads from the Glance API. This can\nreduce download time for images in the ten to hundreds of GBs from tens of\nminutes to tens of seconds, but requires a Ceph-based deployment and access\nfrom the compute nodes to Ceph.\n\nRelated options:\n\n* ``[glance] rbd_user``\n* ``[glance] rbd_connect_timeout``\n* ``[glance] rbd_pool``\n* ``[glance] rbd_ceph_conf``\n'), cfg.StrOpt('rbd_user', default='', help='\nThe RADOS client name for accessing Glance images stored as rbd volumes.\n\nRelated options:\n\n* This option is only used if ``[glance] enable_rbd_download`` is set to True.\n'), cfg.IntOpt('rbd_connect_timeout', default=5, help='\nThe RADOS client timeout in seconds when initially connecting to the cluster.\n\nRelated options:\n\n* This option is only used if ``[glance] enable_rbd_download`` is set to True.\n'), cfg.StrOpt('rbd_pool', default='', help='\nThe RADOS pool in which the Glance images are stored as rbd volumes.\n\nRelated options:\n\n* This option is only used if ``[glance] enable_rbd_download`` is set to True.\n'), cfg.StrOpt('rbd_ceph_conf', default='', help='\nPath to the ceph configuration file to use.\n\nRelated options:\n\n* This option is only used if ``[glance] enable_rbd_download`` is set to True.\n'), cfg.BoolOpt('debug', default=False, help='Enable or disable debug logging with glanceclient.')]
deprecated_ksa_opts = {'insecure': [cfg.DeprecatedOpt('api_insecure', group=glance_group.name)], 'cafile': [cfg.DeprecatedOpt('ca_file', group='ssl')], 'certfile': [cfg.DeprecatedOpt('cert_file', group='ssl')], 'keyfile': [cfg.DeprecatedOpt('key_file', group='ssl')]}

@p.trace('register_opts')
def register_opts(conf):
    conf.register_group(glance_group)
    conf.register_opts(glance_opts, group=glance_group)
    confutils.register_ksa_opts(conf, glance_group, DEFAULT_SERVICE_TYPE, include_auth=False, deprecated_opts=deprecated_ksa_opts)

@p.trace('list_opts')
def list_opts():
    return {glance_group: glance_opts + ks_loading.get_session_conf_options() + confutils.get_ksa_adapter_opts(DEFAULT_SERVICE_TYPE, deprecated_opts=deprecated_ksa_opts)}