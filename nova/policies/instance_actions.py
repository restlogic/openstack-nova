from bees import profiler as p
from oslo_policy import policy
from nova.policies import base
ROOT_POLICY = 'os_compute_api:os-instance-actions'
BASE_POLICY_NAME = 'os_compute_api:os-instance-actions:%s'
DEPRECATED_INSTANCE_ACTION_POLICY = policy.DeprecatedRule(ROOT_POLICY, base.RULE_ADMIN_OR_OWNER)
DEPRECATED_REASON = '\nNova API policies are introducing new default roles with scope_type\ncapabilities. Old policies are deprecated and silently going to be ignored\nin nova 23.0.0 release.\n'
instance_actions_policies = [policy.DocumentedRuleDefault(name=BASE_POLICY_NAME % 'events:details', check_str=base.SYSTEM_READER, description='Add "details" key in action events for a server.\n\nThis check is performed only after the check\nos_compute_api:os-instance-actions:show passes. Beginning with Microversion\n2.84, new field \'details\' is exposed via API which can have more details about\nevent failure. That field is controlled by this policy which is system reader\nby default. Making the \'details\' field visible to the non-admin user helps to\nunderstand the nature of the problem (i.e. if the action can be retried),\nbut in the other hand it might leak information about the deployment\n(e.g. the type of the hypervisor).\n', operations=[{'method': 'GET', 'path': '/servers/{server_id}/os-instance-actions/{request_id}'}], scope_types=['system', 'project']), policy.DocumentedRuleDefault(name=BASE_POLICY_NAME % 'events', check_str=base.SYSTEM_READER, description='Add events details in action details for a server.\nThis check is performed only after the check\nos_compute_api:os-instance-actions:show passes. Beginning with Microversion\n2.51, events details are always included; traceback information is provided\nper event if policy enforcement passes. Beginning with Microversion 2.62,\neach event includes a hashed host identifier and, if policy enforcement\npasses, the name of the host.', operations=[{'method': 'GET', 'path': '/servers/{server_id}/os-instance-actions/{request_id}'}], scope_types=['system', 'project']), policy.DocumentedRuleDefault(name=BASE_POLICY_NAME % 'list', check_str=base.PROJECT_READER_OR_SYSTEM_READER, description='List actions for a server.', operations=[{'method': 'GET', 'path': '/servers/{server_id}/os-instance-actions'}], scope_types=['system', 'project'], deprecated_rule=DEPRECATED_INSTANCE_ACTION_POLICY, deprecated_reason=DEPRECATED_REASON, deprecated_since='21.0.0'), policy.DocumentedRuleDefault(name=BASE_POLICY_NAME % 'show', check_str=base.PROJECT_READER_OR_SYSTEM_READER, description='Show action details for a server.', operations=[{'method': 'GET', 'path': '/servers/{server_id}/os-instance-actions/{request_id}'}], scope_types=['system', 'project'], deprecated_rule=DEPRECATED_INSTANCE_ACTION_POLICY, deprecated_reason=DEPRECATED_REASON, deprecated_since='21.0.0')]

@p.trace('list_rules')
def list_rules():
    return instance_actions_policies